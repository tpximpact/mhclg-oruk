import sharedDefinitions from './sharedDefinitions.json'

export const generate = ({ numRows, rowsPerPage, failEveryNRows }) => ({
	NB: `This is dummy data generated by invoking generate({numRows: ${numRows}, rowsPerPage:${rowsPerPage}, failEveryNRows:${failEveryNRows}})`,
	definitions: generateDefinitions({
		rowsPerPage: rowsPerPage
	}),
	data: generateData({
		numRows: numRows,
		failEveryNRows: failEveryNRows
	})
})

export const generateDefinitions = ({ rowsPerPage }) => {
	let definitions = Object.assign({}, sharedDefinitions)
	Object.keys(definitions.views).map(viewKey => {
		definitions.views[viewKey].rowsPerPage = rowsPerPage
	})
	return definitions
}

export const generateData = ({ numRows, failEveryNRows }) => {
	const data = Array(numRows)
		.fill()
		.map((_, n) => {
			const rowNum = n + 1
			const fail = rowNum % failEveryNRows === 0
			return generateDataRow(rowNum, fail)
		})
	return data
}

export const generateDataRow = (rowNum, fail) => {
	return {
		name: {
			value: 'Dummy service ' + rowNum
		},
		comment: {
			value: lipsum(rowNum)
		},
		service: {
			value: 'example.com',
			url: 'http://example.com/' + rowNum + '.json'
		},
		developer: {
			value: 'DeveloperCo',
			url: 'https://example.com/developer'
		},
		publisher: {
			value: 'Local Authority ' + rowNum,
			url: 'https://example.com/localauthority'
		},
		schemaVersion: {
			value: '3.0'
		},
		statusIsUp: {
			value: 1
		},
		statusIsValid: {
			value: fail ? 0 : 1
		},
		statusOverall: {
			value: fail ? 0 : 1
		},
		testDate: {
			value: '2024-08-06T18:00:07',
			url: '/developer/tools/dashboard/' + rowNum
		}
	}
}

const LOREMIPSUM =
	'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce maximus dui dolor, vitae molestie est egestas vitae. Nullam diam felis, facilisis sagittis finibus non, auctor pharetra risus. Morbi blandit ante ut mi interdum facilisis. Donec id interdum nibh. Morbi ultricies venenatis mauris. Sed vitae euismod mi. Aliquam bibendum velit id lobortis sagittis. Donec in ex tristique, porta felis vitae, ullamcorper quam. In feugiat malesuada risus at sagittis. Vivamus eu egestas tortor. Curabitur erat justo, finibus at iaculis ac, facilisis quis ante. Maecenas et dolor pulvinar, pretium purus in, tincidunt metus. Vestibulum ac libero vel nulla fringilla sagittis sed id dui. Pellentesque interdum imperdiet magna. Fusce blandit tortor eget elit sodales, a consectetur urna semper. Mauris id lobortis libero. Nullam pharetra massa nec sagittis efficitur. Nullam dictum dui nunc, quis pellentesque risus ultrices vitae. Donec in lobortis nulla, in mattis metus. Vivamus iaculis, tortor nec vulputate malesuada, elit lectus condimentum nisl, ut ullamcorper tortor eros ac augue. Ut consectetur egestas iaculis. Nulla fringilla ultricies efficitur. Suspendisse felis urna, dignissim sed auctor a, vehicula vel nunc. Vivamus arcu velit, finibus id felis at, venenatis auctor nisl. Aenean facilisis, sapien eget vulputate molestie, felis ex tempor ligula, ut sagittis magna risus in erat. Cras iaculis felis vel neque commodo, at vehicula nisl gravida. Proin nunc purus, lacinia nec odio eu, mollis commodo velit. Ut cursus rhoncus ultricies. Praesent neque nisi, ultricies nec varius sit amet, iaculis et libero. Phasellus id nisi quis erat rutrum placerat a at massa. Praesent dignissim venenatis blandit. Nam ac ex tristique libero condimentum ullamcorper condimentum fermentum ipsum. Integer eget tempus arcu. Nunc vel interdum sapien, sed mattis justo. Proin malesuada dui eget massa malesuada luctus.'

const lipsum = numSentences =>
	LOREMIPSUM.split('.')
		.slice(numSentences, numSentences * 2)
		.join('.') + '.'
